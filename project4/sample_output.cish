t7(dynenv) {
   let result = 0; {
     let t6 = 0; {
       result = **(dynenv+4);
       t6 = result;
       result = *dynenv;
       result = t6-result;
     }
     return result;
   }
}
t8(dynenv) {
   let result = 0; {
     result = malloc(8);
     *result = t7;
     *(result+4) = dynenv;
	 /* returns result which has function t7, val 42, and dynenv */
     return result;
   }
}
main() {
   let dynenv = 0; {
     let result = 0; {
       let t0 = 0; {
         let t1 = 0; {
           let t2 = 0; {
             let t3 = 0; {
               let t4 = 0; {
                 let t5 = 0; {
                   result = malloc(8);
                   *result = t8;
                   *(result+4) = dynenv;
                   t3 = *result;     /* t3 = t8 */
                   t4 = *(result+4); /* t4 = dynenv */
                   result = 42;
                   t5 = result;      /* t5 = 42 */
                   result = malloc(8);
                   *result = t5;
                   *(result+4) = t4;
                   result = t3(result); /* call t8 with pointer to 42 and dynenv */
                 }
               }
             }
             t0 = *result; /* function t7 */
             t1 = *(result+4); /* 42 */
             result = 3;
             t2 = result;
             result = malloc(8);
             *result = t2; /* result points to 3 and 42 */
             *(result+4) = t1;
             result = t0(result);
           }
         }
       }
       return result;
     }
   }
}

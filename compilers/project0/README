Your job for this assignment is to write a Mips assembler that maps a small
subset of Mips assembly into machine code, and then an interpreter for the 
machine code. Please note that the beq instruction has been altered to take
aa offset directly instead of a label. This is done to keep things simple
- otherwise you would need to keep track of labels and their corresponding 
offsets! 

Your job for the assem function found in mips_sim.ml is to map a list of 
Mips assembly instructions into a starting state. A state consists of a 
register file, memory and program counter. Thus, the job of the assem function
is to put the 32-bit encodings of each mips assembly instruction in memory,
start the PC at the beginning of the machine code, and provide an empty
register file. The interp function can then take this initial state and 
produce a final state by "executing" the machine code.

 MIPS Instruction encoding schemes:

 Register Encoding (Add)
   26-31 (6): opcode
   21-25 (5): source register 1
   16-20 (5): source register 2
   11-15 (5): destination register
   6-10  (5): shift value (for shift instructions only)
   0-5   (6): function value

 Immediate Encoding (Beq, Ori, Lw, Sw)
   26-31 (6): opcode
   21-25 (5): source register 1
   16-20 (5): destination register
   0-15 (16): immediate value

 Load Immediate Encoding (Lui)
   26-31 (6): opcode
   21-25 (5): empty buffer space (0)
   16-20 (5): destination register
   0-15 (16): immediate value
   
 Jump Encoding (Jal)
   26-31 (6): opcode
   0-25 (26): immediate value

 Jump Register Encoding (Jr)
   26-31 (6): opcode
   21-25 (5): destination register
   6-20 (15): empty buffer space (0)
   0-5   (6): function value

 Psuedo Instructions (Li)
